Magesh Kuppan

Methodology
    No Powerpoint
    No prewritten code
    50% of the participants completing the assignments to continue
    Be prepared to share your solution online

Schedule
    Commence    : 09:00 Hrs
    Tea Break   : 11:00 Hrs (20 mins)
    Lunch Break : 13:00 Hrs (1 Hr)
    Tea Break   : 15:30 Hrs (20 mins)
    Wind up     : 17:50 Hrs

About You
    Name
    Total Experience
    Primary Skillset
    Experience in Golang (if any)
    Any interesting book you read / shows you watched recently


Food & Faith (Shobha Narayanan)
A man called Ove

Why Golang?
    - Faster compilation
    - Garbage Collector
    - Better tooling 

    - Simplicity
        ONLY 25 keywords
            package, var, func, if, swtich, for, fallthrough, break, continue, type, interface, struct, close, select, chan, return, defer, go, map, range, panic, recover, bool, string, int, int8, int16, int32, int64, uint, uint8, uint16, uint32, uint64, float32, float64, complex64, complex128, byte, rune, time, error, nil
        No classes
        No inheritance (only composition)
        No Generics
        No access modifiers
        No exception (only errors)

    - Concurrency
        Goroutines
        Builtin Scheduler
        Built for concurrency
            Language features
                go keyword
                channel datatype
                select statement
                close function
        Parallel ready

    - compiled
    - No VMs or runtimes


TED
    Paradox of choice
        By Barry Schwartz
    Stumbling on Happiness


    
var t = new System.Threading.Thread()
t.Start()

func f1(){

}

func f2(){

}

func main(){
    go f1()
    go f2()
}

http://code.visualstudio.com/


Data Types in Golang
    bool
    string

    int
    int8
    int16
    int32
    int64

    uint
    uint8
    uint16
    uint32
    uint64

    float32
    float64

    complex64 (real float32, imaginary float32)
    complex128 (real float64, imaginary float64)

    byte (alias for uint8)
    rune (alias for int32) (represents a unicode code point)


Assignment - 1
    Build an interactive calculator

    Display the following menu
        1. Add
        2. Subtract
        3. Multiply
        4. Divide
        5. Exit

    Keep displaying the menu until the user chooses 'exit'
    if the user chooses 1 - 4
        ask the user for two numbers
        display the result of the operation


Functions
    - can return more than one result
    - variadic functions
    - Higher Order functions
        - functions can be assigned to variables
        - functions can be passed as arguments to other functions
        - functions can be returned from other functions

Assignment - 2
    create a function 'increment()' that keeps incrementing the number from 0 and returns it
        NOTE : no other part of the application should be able to influence the outcome of 'increment' function



Memomization

func isPrime(n int){
    fmt.Printlf("Processing %d\n", n)
    //processing
    return true/false
}

isPrime(10) //=> processing, returning false
isPrime(10) //=> NO processing, returning false
isPrime(10) //=> NO processing, returning false
isPrime(11) //=> processing, returning true
isPrime(11) //=> NO processing, returning true
isPrime(10) //=> processing, returning false

Collections
    - Array
        Fixed size collection of values of the same type
        
    - Slice
        Dynamic size collection of values of the same type
        Wrapper on an array

    - Map
